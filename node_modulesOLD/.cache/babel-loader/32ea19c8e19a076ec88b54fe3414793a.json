{"ast":null,"code":"//IMPORTANDO TYPES\nimport { TRAER_DOCUMENTO, TRAER_DOCUMENTO_EXITO, TRAER_DOCUMENTO_ERROR, OBTENER_DOCUMENTO_ELIMINAR, DOCUMENTO_ELIMINADO_EXITO, DOCUMENTO_ELIMINADO_ERROR } from \"../types\";\nimport clienteAxios from \"../config/axios.js\"; //TRAER LOS DOCUMENTOS\n//recibimos el tipo de documento y el numero de documento desde componente documento\n\nexport function traerDocumentosActions(busqueda) {\n  return async dispatch => {\n    dispatch(traerDocumento());\n    let res;\n\n    try {\n      //consulta en la base de datos\n      res = await clienteAxios.get(`/facturas/${busqueda}`); //si todo sale bien, actualizamos state\n\n      dispatch(traerDocumentoExito(res.data));\n    } catch (error) {\n      //console.log(error.response.data);\n      //console.log(error.response.status);\n      //console.log(error.response.headers);\n      dispatch(traerDocumentoError(error.response.data.mensaje));\n    }\n  };\n} //FUNCIONES - ACCIONES\n\nconst traerDocumento = documento => ({\n  type: TRAER_DOCUMENTO,\n  payload: true\n}); //si se traer el documento exitosamente del api\n\n\nconst traerDocumentoExito = res => ({\n  type: TRAER_DOCUMENTO_EXITO,\n  payload: res\n}); //si se presenta un error\n\n\nconst traerDocumentoError = error => ({\n  type: TRAER_DOCUMENTO_ERROR,\n  payload: error\n});","map":{"version":3,"sources":["E:/HELMER/Proyectos/ucm/Gestion/src/actions/documentosActions.js"],"names":["TRAER_DOCUMENTO","TRAER_DOCUMENTO_EXITO","TRAER_DOCUMENTO_ERROR","OBTENER_DOCUMENTO_ELIMINAR","DOCUMENTO_ELIMINADO_EXITO","DOCUMENTO_ELIMINADO_ERROR","clienteAxios","traerDocumentosActions","busqueda","dispatch","traerDocumento","res","get","traerDocumentoExito","data","error","traerDocumentoError","response","mensaje","documento","type","payload"],"mappings":"AAAA;AACA,SACEA,eADF,EAEEC,qBAFF,EAGEC,qBAHF,EAIEC,0BAJF,EAKEC,yBALF,EAMEC,yBANF,QAOO,UAPP;AAQA,OAAOC,YAAP,MAAyB,oBAAzB,C,CAEA;AACA;;AACA,OAAO,SAASC,sBAAT,CAAgCC,QAAhC,EAA0C;AAC/C,SAAO,MAAOC,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CAACC,cAAc,EAAf,CAAR;AACA,QAAIC,GAAJ;;AACA,QAAI;AACF;AACAA,MAAAA,GAAG,GAAG,MAAML,YAAY,CAACM,GAAb,CAAkB,aAAYJ,QAAS,EAAvC,CAAZ,CAFE,CAIF;;AACAC,MAAAA,QAAQ,CAACI,mBAAmB,CAACF,GAAG,CAACG,IAAL,CAApB,CAAR;AACD,KAND,CAME,OAAOC,KAAP,EAAc;AACZ;AACA;AACD;AACDN,MAAAA,QAAQ,CAACO,mBAAmB,CAACD,KAAK,CAACE,QAAN,CAAeH,IAAf,CAAoBI,OAArB,CAApB,CAAR;AACD;AACF,GAfD;AAgBD,C,CAED;;AAEA,MAAMR,cAAc,GAAIS,SAAD,KAAgB;AACrCC,EAAAA,IAAI,EAAEpB,eAD+B;AAErCqB,EAAAA,OAAO,EAAE;AAF4B,CAAhB,CAAvB,C,CAKA;;;AACA,MAAMR,mBAAmB,GAAIF,GAAD,KAAU;AACpCS,EAAAA,IAAI,EAAEnB,qBAD8B;AAEpCoB,EAAAA,OAAO,EAAEV;AAF2B,CAAV,CAA5B,C,CAKA;;;AAEA,MAAMK,mBAAmB,GAAID,KAAD,KAAY;AACtCK,EAAAA,IAAI,EAAElB,qBADgC;AAEtCmB,EAAAA,OAAO,EAAEN;AAF6B,CAAZ,CAA5B","sourcesContent":["//IMPORTANDO TYPES\r\nimport {\r\n  TRAER_DOCUMENTO,\r\n  TRAER_DOCUMENTO_EXITO,\r\n  TRAER_DOCUMENTO_ERROR,\r\n  OBTENER_DOCUMENTO_ELIMINAR,\r\n  DOCUMENTO_ELIMINADO_EXITO,\r\n  DOCUMENTO_ELIMINADO_ERROR\r\n} from \"../types\";\r\nimport clienteAxios from \"../config/axios.js\";\r\n\r\n//TRAER LOS DOCUMENTOS\r\n//recibimos el tipo de documento y el numero de documento desde componente documento\r\nexport function traerDocumentosActions(busqueda) {\r\n  return async (dispatch) => {\r\n    dispatch(traerDocumento());\r\n    let res;\r\n    try {\r\n      //consulta en la base de datos\r\n      res = await clienteAxios.get(`/facturas/${busqueda}`);\r\n\r\n      //si todo sale bien, actualizamos state\r\n      dispatch(traerDocumentoExito(res.data));\r\n    } catch (error) {\r\n        //console.log(error.response.data);\r\n        //console.log(error.response.status);\r\n       //console.log(error.response.headers);\r\n      dispatch(traerDocumentoError(error.response.data.mensaje));\r\n    }\r\n  };\r\n}\r\n\r\n//FUNCIONES - ACCIONES\r\n\r\nconst traerDocumento = (documento) => ({\r\n  type: TRAER_DOCUMENTO,\r\n  payload: true,\r\n});\r\n\r\n//si se traer el documento exitosamente del api\r\nconst traerDocumentoExito = (res) => ({\r\n  type: TRAER_DOCUMENTO_EXITO,\r\n  payload: res,\r\n});\r\n\r\n//si se presenta un error\r\n\r\nconst traerDocumentoError = (error) => ({\r\n  type: TRAER_DOCUMENTO_ERROR,\r\n  payload: error,\r\n});\r\n"]},"metadata":{},"sourceType":"module"}